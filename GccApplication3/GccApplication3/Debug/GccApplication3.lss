
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000027a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000988  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072c  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043c  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000018c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d5  00000000  00000000  00001d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 28 01 	call	0x250	; 0x250 <main>
  9e:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mostrarSecuencia>:
uint8_t secuencia = 1;	// Controla qué secuencia se está ejecutando (1, 2 o 3)
uint8_t izquierda = 7;	// Posición del LED izquierdo para la secuencia 3 (comienza en bit 7)
uint8_t derecha = 0;	// Posición del LED derecho para la secuencia 3 (comienza en bit 0)

void mostrarSecuencia(uint8_t sec){
	if (!(PINC & (1<<PINC1))){
  a6:	31 99       	sbic	0x06, 1	; 6
  a8:	05 c0       	rjmp	.+10     	; 0xb4 <mostrarSecuencia+0xe>
		PORTB = sec<<3;			//Muestro el numero de la secuencia en el puerto B (01 = 1, 10 = 2, 11 = 3) mientras esté presionado
  aa:	88 0f       	add	r24, r24
  ac:	88 0f       	add	r24, r24
  ae:	88 0f       	add	r24, r24
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	08 95       	ret
		} else {
		PORTB = 0;				//Apago si no está presionado
  b4:	15 b8       	out	0x05, r1	; 5
  b6:	08 95       	ret

000000b8 <presionaBoton>:
	}
}

uint8_t presionaBoton(void)
{
	if(!(PINC & (1<<PINC0))) {							// Verifico si esta presionado el boton. puedo usar if ( bit_is_clear(PINC, PC0) ) { … } que comprueba si PC0 está en 0
  b8:	30 9b       	sbis	0x06, 0	; 6
  ba:	0b c0       	rjmp	.+22     	; 0xd2 <presionaBoton+0x1a>
		while (!(PINC & (1<<PINC0))) _delay_ms(20);		// Si esta presionado, espero 20 ms para el debounce
		return 1;										// Botón presionado
	}
	return 0;											// Botón no presionado
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 ef       	ldi	r24, 0xF9	; 249
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <presionaBoton+0xe>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <presionaBoton+0x18>
  d0:	00 00       	nop
}

uint8_t presionaBoton(void)
{
	if(!(PINC & (1<<PINC0))) {							// Verifico si esta presionado el boton. puedo usar if ( bit_is_clear(PINC, PC0) ) { … } que comprueba si PC0 está en 0
		while (!(PINC & (1<<PINC0))) _delay_ms(20);		// Si esta presionado, espero 20 ms para el debounce
  d2:	30 9b       	sbis	0x06, 0	; 6
  d4:	f5 cf       	rjmp	.-22     	; 0xc0 <presionaBoton+0x8>
		return 1;										// Botón presionado
  d6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;											// Botón no presionado
}
  d8:	08 95       	ret

000000da <configuracion>:

void configuracion(){
	
	DDRD = 0xFF;							// Configuro todo el puerto D como salida
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~((1<<DDC0) | (1<<DDC1));		// Configuro los bit 0 y 1 del puerto C como entrada
  de:	87 b1       	in	r24, 0x07	; 7
  e0:	8c 7f       	andi	r24, 0xFC	; 252
  e2:	87 b9       	out	0x07, r24	; 7
	PORTC |= ((1<<PORTC0) | (1<<PORTC1));	// Habilito Pull-Up en bits 0 y 1 del puerto C
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	83 60       	ori	r24, 0x03	; 3
  e8:	88 b9       	out	0x08, r24	; 8
	DDRB |= ((1<<DDB3) | (1<<DDB4));		// Configuro los bits 3 y 4 del puerto B como salida
  ea:	84 b1       	in	r24, 0x04	; 4
  ec:	88 61       	ori	r24, 0x18	; 24
  ee:	84 b9       	out	0x04, r24	; 4
  f0:	08 95       	ret

000000f2 <secuencia1>:
}

void secuencia1(void){
	mostrarSecuencia(secuencia);	
  f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <secuencia>
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <mostrarSecuencia>
	PORTD = 0b10101010;				// Escribo en Port D los pares
  fa:	8a ea       	ldi	r24, 0xAA	; 170
  fc:	8b b9       	out	0x0b, r24	; 11
	if(presionaBoton()) {			// Verifico si esta presionado el boton
  fe:	0e 94 5c 00 	call	0xb8	; 0xb8 <presionaBoton>
 102:	88 23       	and	r24, r24
 104:	21 f0       	breq	.+8      	; 0x10e <secuencia1+0x1c>
		secuencia = 2;				//Cambio a la siguiente secuencia
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <secuencia>
		return;
 10c:	08 95       	ret
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	81 ee       	ldi	r24, 0xE1	; 225
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <secuencia1+0x22>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <secuencia1+0x2c>
 11e:	00 00       	nop
	}	
	_delay_ms(100);	
	PORTD = 0b01010101;				// Escribo en Port D los impares	
 120:	85 e5       	ldi	r24, 0x55	; 85
 122:	8b b9       	out	0x0b, r24	; 11
	if(presionaBoton()) {			// Verifico si esta presionado el boton
 124:	0e 94 5c 00 	call	0xb8	; 0xb8 <presionaBoton>
 128:	88 23       	and	r24, r24
 12a:	21 f0       	breq	.+8      	; 0x134 <secuencia1+0x42>
		secuencia = 2;				//Cambio a la siguiente secuencia
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <secuencia>
		return;
 132:	08 95       	ret
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	81 ee       	ldi	r24, 0xE1	; 225
 138:	94 e0       	ldi	r25, 0x04	; 4
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <secuencia1+0x48>
 142:	00 c0       	rjmp	.+0      	; 0x144 <secuencia1+0x52>
 144:	00 00       	nop
 146:	08 95       	ret

00000148 <secuencia2>:
	}	
	_delay_ms(100);
}
void secuencia2(void){
 148:	cf 93       	push	r28
	for(uint8_t i = 0; i<8; i++){
 14a:	c0 e0       	ldi	r28, 0x00	; 0
 14c:	1f c0       	rjmp	.+62     	; 0x18c <secuencia2+0x44>
		mostrarSecuencia(secuencia);
 14e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <secuencia>
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <mostrarSecuencia>
		PORTD = (1<<i);				//Prendo el LED en la posición i
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0c 2e       	mov	r0, r28
 15c:	02 c0       	rjmp	.+4      	; 0x162 <secuencia2+0x1a>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <secuencia2+0x16>
 166:	8b b9       	out	0x0b, r24	; 11
		if(presionaBoton()) {		//Verifico si esta presionado el boton
 168:	0e 94 5c 00 	call	0xb8	; 0xb8 <presionaBoton>
 16c:	88 23       	and	r24, r24
 16e:	21 f0       	breq	.+8      	; 0x178 <secuencia2+0x30>
			secuencia = 3;			//Cambio a la siguiente secuencia
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <secuencia>
			return;
 176:	0c c0       	rjmp	.+24     	; 0x190 <secuencia2+0x48>
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	81 ee       	ldi	r24, 0xE1	; 225
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <secuencia2+0x36>
 186:	00 c0       	rjmp	.+0      	; 0x188 <secuencia2+0x40>
 188:	00 00       	nop
		return;
	}	
	_delay_ms(100);
}
void secuencia2(void){
	for(uint8_t i = 0; i<8; i++){
 18a:	cf 5f       	subi	r28, 0xFF	; 255
 18c:	c8 30       	cpi	r28, 0x08	; 8
 18e:	f8 f2       	brcs	.-66     	; 0x14e <secuencia2+0x6>
			secuencia = 3;			//Cambio a la siguiente secuencia
			return;
		}
		_delay_ms(100);
	}
}
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <secuencia3>:
void secuencia3(void){
	if (secuencia == 3){
 194:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <secuencia>
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	09 f0       	breq	.+2      	; 0x19e <secuencia3+0xa>
 19c:	58 c0       	rjmp	.+176    	; 0x24e <secuencia3+0xba>
		mostrarSecuencia(secuencia);
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <mostrarSecuencia>
		if (izquierda > derecha) {		//Verifico si los leds se chocan
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 1aa:	98 17       	cp	r25, r24
 1ac:	08 f0       	brcs	.+2      	; 0x1b0 <secuencia3+0x1c>
 1ae:	4a c0       	rjmp	.+148    	; 0x244 <secuencia3+0xb0>
			PORTD = (1 << izquierda);
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	a9 01       	movw	r20, r18
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <secuencia3+0x28>
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	8a 95       	dec	r24
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <secuencia3+0x24>
 1c0:	4b b9       	out	0x0b, r20	; 11
			if(presionaBoton()) {		// Verifico si esta presionado el boton
 1c2:	0e 94 5c 00 	call	0xb8	; 0xb8 <presionaBoton>
 1c6:	88 23       	and	r24, r24
 1c8:	49 f0       	breq	.+18     	; 0x1dc <secuencia3+0x48>
				secuencia = 1;			//Cambio a la siguiente secuencia
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <secuencia>
				izquierda = 7;			//reinicio variables
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				derecha = 0;
 1d6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
				return;
 1da:	08 95       	ret
 1dc:	5f ef       	ldi	r21, 0xFF	; 255
 1de:	81 ee       	ldi	r24, 0xE1	; 225
 1e0:	94 e0       	ldi	r25, 0x04	; 4
 1e2:	51 50       	subi	r21, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <secuencia3+0x4e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <secuencia3+0x58>
 1ec:	00 00       	nop
			}
			_delay_ms(100);				// Retardo para visualizar el encendido de los LEDs
			PORTD = (1 << derecha);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <__data_end>
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <secuencia3+0x68>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <secuencia3+0x64>
 200:	8b b9       	out	0x0b, r24	; 11
			if(presionaBoton()) {		//Verifico si esta presionado el boton
 202:	0e 94 5c 00 	call	0xb8	; 0xb8 <presionaBoton>
 206:	88 23       	and	r24, r24
 208:	49 f0       	breq	.+18     	; 0x21c <secuencia3+0x88>
				secuencia = 1;			//Cambio a la siguiente secuencia
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <secuencia>
				izquierda = 7;			//reinicio variables
 210:	87 e0       	ldi	r24, 0x07	; 7
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				derecha = 0;
 216:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
				return;
 21a:	08 95       	ret
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	41 ee       	ldi	r20, 0xE1	; 225
 220:	54 e0       	ldi	r21, 0x04	; 4
 222:	21 50       	subi	r18, 0x01	; 1
 224:	40 40       	sbci	r20, 0x00	; 0
 226:	50 40       	sbci	r21, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <secuencia3+0x8e>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <secuencia3+0x98>
 22c:	00 00       	nop
			}
			_delay_ms(100);
			izquierda--;				//Muevo a la siguiente posición
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 232:	81 50       	subi	r24, 0x01	; 1
 234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			derecha++;
 238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 242:	08 95       	ret
		} else {
			izquierda = 7;				//reinicio variables cuando se encuentran en el medio
 244:	87 e0       	ldi	r24, 0x07	; 7
 246:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			derecha = 0;
 24a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 24e:	08 95       	ret

00000250 <main>:
	}
}

int main(void)
{
	configuracion();
 250:	0e 94 6d 00 	call	0xda	; 0xda <configuracion>
    while (1) 
    {				
		switch (secuencia) {
 254:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <secuencia>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	39 f0       	breq	.+14     	; 0x26a <main+0x1a>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	41 f0       	breq	.+16     	; 0x270 <main+0x20>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	c1 f7       	brne	.-16     	; 0x254 <main+0x4>
			case 1:
				secuencia1();
 264:	0e 94 79 00 	call	0xf2	; 0xf2 <secuencia1>
				break;
 268:	f5 cf       	rjmp	.-22     	; 0x254 <main+0x4>
			case 2:
				secuencia2();
 26a:	0e 94 a4 00 	call	0x148	; 0x148 <secuencia2>
				break;
 26e:	f2 cf       	rjmp	.-28     	; 0x254 <main+0x4>
			case 3:
				secuencia3();
 270:	0e 94 ca 00 	call	0x194	; 0x194 <secuencia3>
				break;
 274:	ef cf       	rjmp	.-34     	; 0x254 <main+0x4>

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
